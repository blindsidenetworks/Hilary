/*!
 * Copyright 2014 Apereo Foundation (AF) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var Recaptcha = require('recaptcha').Recaptcha;

var AuthenticationAPI = require('oae-authentication');
var AuthenticationConstants = require('oae-authentication/lib/constants').AuthenticationConstants;
var LoginId = require('oae-authentication/lib/model').LoginId;
var OAE = require('oae-util/lib/oae');
var OaeUtil = require('oae-util/lib/util');
var PrincipalsConfig = require('oae-config').config('oae-principals');

var Context = require('oae-context').Context;
var TenantsAPI = require('oae-tenants');

var PrincipalsAPI = require('./api');

/**
 * Handle a request that gets a user's `me` feed
 *
 * @param  {Request}    req     The express Request object
 * @param  {Response}   res     The express Response object
 * @api private
 */
var _handleGetMe = function(req, res) {
    PrincipalsAPI.getMe(req.ctx, function(err, meData) {
        if (err) {
            return res.send(err.code, err.msg);
        }

        return res.send(200, meData);
    });
};

/**
 * Handle a request that gets a user's full profile information
 *
 * @param  {Request}    req             The express Request object
 * @param  {String}     req.params.id   The id of the user whose profile to get
 * @param  {Response}   res             The express Response object
 * @api private
 */
var _handleGetFullProfile = function(req, res) {
    PrincipalsAPI.getFullUserProfile(req.ctx, req.params.id, function(err, user) {
        if (err) {
            return res.send(err.code, err.msg);
        }

        return res.send(200, user);
    });
};

/**
 * Handle a request that imports a bulk set of users from an uploaded CSV file
 *
 * @param  {Request}    req                                 The express Request object
 * @param  {String}     req.body.authenticationStrategy     The authentication strategy to use when creating the user login ids
 * @param  {String}     [req.body.forceProfileUpdate]       If `'true'`, indicates that profiles should be updated with the given data, not just created. Otherwise, profiles will only be created if they don't already have a matching external id in the provided authentication strategy
 * @param  {String}     [req.body.tenantAlias]              The target tenant in which to import the users. Defaults to the tenant on which the request was made
 * @param  {File}       [req.files.file]                    An express File object representing the CSV file stream
 * @param  {Response}   res                                 The express Response object
 * @api private
 */
var _handleImportUsers = function(req, res) {
    var forceProfileUpdate = (req.body.forceProfileUpdate === 'true');
    PrincipalsAPI.importUsers(req.ctx, req.body.tenantAlias, req.files.file, req.body.authenticationStrategy, forceProfileUpdate, function(err) {
        if (err) {
            return res.send(err.code, err.msg);
        }

        // Set the response type to text/plain, as the UI uses an iFrame upload mechanism to support IE9
        // file uploads. If the response type is not set to text/plain, IE9 will try to download the response
        res.set('Content-Type', 'text/plain');
        return res.send(200);
    });
};

/**
 * Handle a request that updates a user
 *
 * @param  {Request}    req             The express Request object
 * @param  {String}     req.params.id   The id of the user to update
 * @param  {Object}     req.body        The profile fields and values to apply to the user
 * @param  {Response}   res             The express Response object
 * @api private
 */
var _handleUpdateUser = function(req, res) {
    PrincipalsAPI.updateUser(req.ctx, req.params.id, req.body, function(err, user) {
        if (err) {
            return res.send(err.code, err.msg);
        }

        return res.send(200, user);
    });
};

/**
 * Handle a request to promote or demote a user to or from being a tenant admin
 *
 * @param  {Request}    req             The express Request object
 * @param  {String}     req.params.id   The id of the user whose profile to get
 * @param  {String}     req.body.admin  `'true'` or `1` if the user should be set to an admin. `'false'` or `0` to ensure they are not an admin
 * @param  {Response}   res             The express Response object
 * @api private
 */
var _handleSetTenantAdmin = function(req, res) {
    PrincipalsAPI.setTenantAdmin(req.ctx, req.params.id, req.body.admin, function(err) {
        if (err) {
            return res.send(err.code, err.msg);
        }

        return res.send(200);
    });
};

/*!
 * Set a user's profile picture
 */
OAE.tenantRouter.on('post', '/api/user/:id/picture', function(req, res) {
    req.files = req.files || {};
    PrincipalsAPI.storePicture(req.ctx, req.params.id, req.files.file, function(err, principal) {
        if (err) {
            return res.send(err.code, err.msg);
        }

        // Set the response type to text/plain, as the UI uses an iFrame upload mechanism to support IE9
        // file uploads. If the response type is not set to text/plain, IE9 will try to download the response.
        res.set('Content-Type', 'text/plain');
        return res.send(200, principal);
    });
});

/*!
 * Get the list of groups a user is a member of
 */
OAE.tenantRouter.on('get', '/api/user/:id/memberships', function(req, res) {
    var limit = OaeUtil.getNumberParam(req.query.limit, 10, 1, 25);
    PrincipalsAPI.getMembershipsLibrary(req.ctx, req.params.id, req.query.start, limit, function(err, memberships, nextToken) {
        if (err) {
            return res.send(err.code, err.msg);
        }

        return res.send(200, {'results': memberships, 'nextToken': nextToken});
    });
});

/*!
 * Return the Terms and Conditions for the current tenant
 */
OAE.tenantRouter.on('get', '/api/user/termsAndConditions', function(req, res) {
    var termsAndConditions = PrincipalsAPI.getTermsAndConditions(req.ctx, req.query.locale);
    res.send(200, termsAndConditions);
});

/*!
 * Accept the Terms and Conditions
 */
OAE.tenantRouter.on('post', '/api/user/:id/termsAndConditions', function(req, res) {
    PrincipalsAPI.acceptTermsAndConditions(req.ctx, req.params.id, function(err, user) {
        if (err) {
            return res.send(err.code, err.msg);
        }

        return res.send(200, user);
    });
});

/*!
 * Create a new user with a local login strategy
 */
OAE.globalAdminRouter.on('post', '/api/user/:tenantAlias/create', function(req, res) {
    var loginId = new LoginId(req.params.tenantAlias, AuthenticationConstants.providers.LOCAL, req.body.username, {'password': req.body.password});
    var opts = {
        'visibility': req.body.visibility,
        'email': req.body.email,
        'locale': req.body.locale || req.ctx.locale(),
        'publicAlias': req.body.publicAlias,
        'acceptedTC': (req.body.acceptedTC === 'true')
    };

    AuthenticationAPI.createUser(req.ctx, loginId, req.body.displayName, opts, function(err, newUser) {
        if (err) {
            return res.send(err.code, err.msg);
        }

        return res.send(201, newUser);
    });
});

/*!
 * Create a new user with a local login strategy
 */
OAE.tenantRouter.on('post', '/api/user/create', function(req, res) {
    var ctx = req.ctx;
    var tenant = ctx.tenant();
    var user = ctx.user();

    /*!
     * Create a local user account
     */
    var createUser = function() {
        var loginId = new LoginId(tenant.alias, AuthenticationConstants.providers.LOCAL, req.body.username, { password: req.body.password });

        var opts = {
            'visibility': req.body.visibility,
            'email': req.body.email,
            'emailPreference': req.body.emailPreference,
            'locale': req.body.locale || req.ctx.locale(),
            'publicAlias': req.body.publicAlias,
            'acceptedTC': (req.body.acceptedTC === 'true')
        };

        AuthenticationAPI.createUser(ctx, loginId, req.body.displayName, opts, function(err, newUser) {
            if (err) {
                return res.send(err.code, err.msg);
            }

            return res.send(201, newUser);
        });
    };

    if (user) {
        if (user.isAdmin(tenant.alias)) {
            // If the current user is an admin, the reCaptcha verification can be skipped
            return createUser();
        } else {
            // Non-admin users cannot create accounts
            return res.send(401);
        }
    }

    // Check if the Terms and Conditions has been agreed to (if applicable)
    var needsTermsAndConditionsAgreement = PrincipalsConfig.getValue(tenant.alias, 'termsAndConditions', 'enabled');
    var acceptedTC = (req.body.acceptedTC === 'true');
    if (needsTermsAndConditionsAgreement && acceptedTC !== true) {
        return res.send(400, 'You need to accept the Terms and Conditions');
    }

    // Check if we need to validate with reCaptcha
    var needsReCaptcha = PrincipalsConfig.getValue(tenant.alias, 'recaptcha', 'enabled');

    if (!needsReCaptcha) {
        return createUser();
    }

    // An anonymous user, do the recaptcha check
    var recaptchaData = {
        'remoteip':  req.connection.remoteAddress,
        'challenge': req.body.recaptchaChallenge,
        'response':  req.body.recaptchaResponse
    };

    var recaptchaPublicKey = PrincipalsConfig.getValue(tenant.alias, 'recaptcha', 'publicKey');
    var recaptchaPrivateKey = PrincipalsConfig.getValue(tenant.alias, 'recaptcha', 'privateKey');
    var recaptcha = new Recaptcha(recaptchaPublicKey, recaptchaPrivateKey, recaptchaData);

    recaptcha.verify(function(success, error_code) {
        if (success) {
            return createUser();
        } else {
            return res.send(400, 'Invalid reCaptcha token');
        }
    });
});

/*!
 * Get the current user's `me` feed
 */
OAE.globalAdminRouter.on('get', '/api/me', _handleGetMe);
OAE.tenantRouter.on('get', '/api/me', _handleGetMe);

/*!
 * Import users using a CSV file
 */
OAE.globalAdminRouter.on('post', '/api/user/import', _handleImportUsers);
OAE.tenantRouter.on('post', '/api/user/import', _handleImportUsers);

/*!
 * Make a user a global or tenant admin
 */
OAE.globalAdminRouter.on('post', '/api/user/:id/admin', _handleSetTenantAdmin);
OAE.tenantRouter.on('post', '/api/user/:id/admin', _handleSetTenantAdmin);

/*!
 * Update a user's basic profile information
 */
OAE.globalAdminRouter.on('post', '/api/user/:id', _handleUpdateUser);
OAE.tenantRouter.on('post', '/api/user/:id', _handleUpdateUser);

/*!
 * Get a user's full profile information
 */
OAE.globalAdminRouter.on('get', '/api/user/:id', _handleGetFullProfile);
OAE.tenantRouter.on('get', '/api/user/:id', _handleGetFullProfile);
