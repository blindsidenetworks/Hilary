<%
    /**
     * Get an appropariate summary given a user's email preference and a set of activities
     * The options are:
     *     -   When an immediate email is sent with a single actor across all activities: <displayName> has been active recently
     *     -   When an immediate email is sent with multiple actors: New activity is waiting for you
     *     -   When a daily email is sent: Here's your summary of today's activity
     *     -   When a weekly email is sent: Here's your summary of last week's activity
     *
     * @return {String}                         An appropriate summary given the user's email preference and given activities
     */
    var getEmailSummary = function() {
        if (user.emailPreference === 'immediate') {
            // Determine if there was a single or multiple actors
            var isSingleActor = true;
            var actor = null;
            _.each(activities, function(activity) {
                if (actor !== null && actor['oae:id'] !== activity.activity.actor['oae:id']) {
                    isSingleActor = false;
                }
                actor = activity.activity.actor;
            });

            if (isSingleActor && actor.objectType !== 'collection') {
                var url = baseUrl + actor['oae:profilePath'];
                var key = 'ACTIVITY_EMAIL_SUMMARY_IMMEDIATE_SINGLE_ACTOR_SINGLE_ACTIVITY';
                if (activities.length > 1) {
                    key = 'ACTIVITY_EMAIL_SUMMARY_IMMEDIATE_SINGLE_ACTOR_MULTIPLE_ACTIVITIES';
                }
                var summary = util.i18n.translate(key, {
                    'actorURL': url,
                    'actor': util.html.encodeForHTML(actor.displayName)
                });
                summary = util.html.ensureLinksStartWith(summary, baseUrl);
                return summary;
            } else {
                return '__MSG__ACTIVITY_EMAIL_SUMMARY_IMMEDIATE_MULTIPLE_ACTORS__';
            }
        } else if (user.emailPreference === 'daily') {
            return '__MSG__ACTIVITY_EMAIL_SUMMARY_DAILY__';
        } else if (user.emailPreference === 'weekly') {
            return '__MSG__ACTIVITY_EMAIL_SUMMARY_WEEKLY__';
        }
    };

    /**
     * Render the email header
     */
    var renderHeader = function() {
        var institutionalLogoURL = getAbsoluteThumbnailUrl(skinVariables['institutional-logo-url'].replace(/\'/g, ''));
        var greeting = util.i18n.translate('ACTIVITY_EMAIL_GREETING', {'name': util.html.encodeForHTML(user.displayName)});
        greeting = util.html.ensureLinksStartWith(greeting, baseUrl);

        var str = '';
        str += '<tr id="header" class="row">';
        str += '    <td align="center">';
        str += '        <table>';
        str += '            <tr id="logo">';
        str += '                <td><img src="' + institutionalLogoURL + '" id="header-logo" /></td>';
        str += '            </tr>';
        str += '            <tr id="greeting">';
        str += '                <td><h1>' + greeting + '</h1></td>';
        str += '            </tr>';
        str += '            <tr id="summary" class="muted">';
        str += '                <td>' + getEmailSummary(user, activities) + '</td>';
        str += '            </tr>';
        str += '        </table>';
        str += '    </td>';
        str += '</tr>';

        print(str);
    };
%>

<%
    /**
     * Render the email footer
     */
    var renderFooter = function() {
        var copyrightSymbolI18n = util.i18n.translate('COPYRIGHT_SYMBOL');
        var apereoFoundationI18n = util.i18n.translate('APEREO_FOUNDATION');
        var url = baseUrl + '/me?emailpreferences';

        var str = '';
        str += '<tr id="footer" class="row">';
        str +=   '<td align="center">';
        str +=       util.i18n.translate('ACTIVITY_EMAIL_CHANGE_PREFRENCES', {'url': url}) + '<br />';
        str +=       copyrightSymbolI18n + ' ' + new Date().getFullYear() + ' ' + apereoFoundationI18n + '.';
        str +=   '</td>';
        str += '</tr>';
        print(str);
    };
%>

<%
    /**
     * Convert a thumbnail URL to an absolute URL 
     *
     * @param  {String}    thumbnailUrl    Thumbnail URL to convert to an absolute URL
     * @return {String}                    Absolute thumbnail URL
     */
    var getAbsoluteThumbnailUrl = function(thumbnailUrl) {
        if (thumbnailUrl.startsWith('/')) {
            return baseUrl + thumbnailUrl;
        } else {
            return thumbnailUrl;
        }
    }
%>

<%
    /**
     * Render a user thumbnail picture
     *
     * @param  {ActivityViewThumbnail|ActivityEntity}    userProfile    The user profile information
     */
    var renderUserThumbnail = function(userProfile) {
        var thumbnailUrl = baseUrl + '/ui/img/icons/user.png';
        if (userProfile && userProfile.thumbnailUrl) {
            thumbnailUrl = getAbsoluteThumbnailUrl(userProfile.thumbnailUrl);
        } else if (userProfile && userProfile['oae:thumbnail']) {
            thumbnailUrl = getAbsoluteThumbnailUrl(userProfile['oae:thumbnail'].url);
        }

        var profilePath = null;
        if (userProfile && userProfile.profilePath) {
            profilePath = baseUrl + userProfile.profilePath;
        } else if (userProfile && userProfile['oae:profilePath']) {
            profilePath = baseUrl + userProfile['oae:profilePath'];
        }

        var str = '';
        str += '<a class="thumbnail-user" href="' + profilePath +  '" title="' + util.html.encodeForHTMLAttribute(userProfile.displayName) + '">';
        str += '    <img src="' + thumbnailUrl + '" alt="' + util.html.encodeForHTMLAttribute(userProfile.displayName) + '" />';
        str += '</a>';
        print(str);
    };
%>

<%
    /**
     * Render the preview tile
     *
     * @param  {Object}    entity    The preview entity
     * @param  {Boolean}   wide      Whether or not to render the wide content preview, defaults to `false`
     */
    var renderPreviewTile = function(entity, wide) {
        var thumbnailUrl = '';

        // Determine the correct image url
        if (wide && entity.wideImageUrl) {
            thumbnailUrl = baseUrl + entity.wideImageUrl;
        } else {
            wide = false;

            if (entity.thumbnailUrl) {
                thumbnailUrl = baseUrl + entity.thumbnailUrl;
            } else {
                var resourceType = entity.resourceType;
                if (resourceType === 'content') {
                    resourceType = entity.resourceSubType;
                }
                thumbnailUrl = baseUrl + '/ui/img/icons/' + resourceType + '.png';
            }
        }

        // Determine the correct subscript for in the tile
        var resourceType = entity.resourceType;
        if (entity.resourceType === 'user') {
            resourceType = util.text.truncate(entity.tenant.displayName, 80);
        } else if (entity.resourceType === 'group') {
            resourceType = '__MSG__GROUP__';
        } else if (entity.resourceType === 'discussion') {
            resourceType = '__MSG__DISCUSSION__';
        } else if (entity.resourceType === 'content') {
            resourceType = util.text.getMimetypeDescription(entity.resourceSubType, entity.mime)
        }

        var str = '';
        str += '<td class="preview-thumbnail-container' + (wide ? ' preview-thumbnail-container-wide' : '') + '" background="' + thumbnailUrl+ '" valign="bottom">';
        str +=     '<div class="preview-thumbnail">';
        if (entity.resourceType !== 'user') {
            str +=         '<img src="' + baseUrl + '/ui/img/icons/' + entity.visibility + '.png" alt="' + entity.visibility + '" />'
        }
        str +=         '<h3>';
        str +=             '<a href="' + baseUrl + entity.profilePath + '" title="' + util.html.encodeForHTMLAttribute(entity.displayName) + '" target="_blank" class="preview-tile-title-description">' + util.html.encodeForHTML(util.text.truncate(entity.displayName, 80)) + '</a>';
        str +=         '</h3>';
        str +=         '<small class="preview-tile-metadata-description">' + resourceType + '</small>';
        str +=     '</div>';
        str += '</td>';
        print(str);
    };
%>

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http: //www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http: //www.w3.org/1999/xhtml">
    <head>
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
        <meta name="viewport" content="width=device-width" />
        <style>

            /*************
             * CORE CSS **
             *************/

            * {
                font-family: HelveticaNeue-Light, "Helvetica Neue Light", "Helvetica Neue", Helvetica, Arial, "Lucida Grande", sans-serif;
            }

            body {
                background-color: <%= skinVariables['body-background-color'] %>;
                color: <%= skinVariables['text-color'] %>;
                font-size: 13px;
                height: 100%;
                padding: 20px;
                -webkit-font-smoothing: antialiased;
                -webkit-text-size-adjust: none;
            }

            body > table {
                margin: 0 auto;
            }

            a {
                color: <%= skinVariables['link-color'] %>;
                text-decoration: none;
            }

            a:hover {
                color: <%= skinVariables['link-hover-color'] %>;
            }

            h1, h2, h3, h4, h5, h6 {
                color: <%= skinVariables['text-color']%>;
                line-height: 1.1;
            }

            h1, h2 {
                font-weight: 200;
            }

            h3 {
                font-weight: 500;
            }

            .muted {
                color: <%= skinVariables['secondary-text-color'] %>;
                font-size: 12px;
            }
            
            .row > td {
                max-width: 700px;
                min-width:400px;
            }

            /************
             ** HEADER **
             ************/

            #header table {
                width: 100%;
            }

            #header td {
                text-align: center;
            }

            #header #logo img {
                height: 50px;
                margin: 0 0 20px;
            }

            #header #greeting h1 {
                font-size: 24px;
                font-weight: bold;
                margin: 0;
            }

            #header #summary td {
                font-size: 15px;
                margin-top: 2px;
            }


            /***********
             ** TILES **
             ***********/

            .preview-thumbnail-container {
                background-position: center;
                background-size: cover;
                border: 1px solid #EEEDEB;
                height: 162px;
                padding: 0px;
                width: 162px;
            }

            .preview-thumbnail-container-wide {
                width: 450px;
            }

            .preview-thumbnail-container .preview-thumbnail {
                background-color: <%= skinVariables['tile-background-color'] %>;
                padding: 7px
            }

            .preview-thumbnail-container .preview-thumbnail img {
                float: right;
                height: 18px;
                width: 18px;
            }

            .preview-thumbnail-container .preview-thumbnail h3 {
                font-size: 14px;
                font-weight: 600;
                line-height: 1.4;
                margin: 0;
            }

            .preview-thumbnail-container .preview-thumbnail h3 .preview-tile-title-description {
                color: <%= skinVariables['tile-title-color'] %>;
            }

            .preview-thumbnail-container .preview-thumbnail .preview-tile-metadata-description {
                color: <%= skinVariables['tile-description-color'] %>;
                text-transform: uppercase;
            }


            /************
             ** FOOTER **
             ************/

            #footer {
                margin: 0 auto;
                font-size: 10px;
                margin-top: 40px;
            }

            #footer #description {
                margin-bottom: 20px
            }


            /****************
             ** THUMBNAILS **
             ****************/

            .thumbnail-user img {
                height: 40px;
                width: 40px;
            }


            /****************
             ** ACTIVITIES **
             ****************/

            .activity-spacer {
                height: 10px;
            }

            .activity-row > td {
                font-size: 14px;
                background-color: #FFF;
                border: 2px solid #ededec;
                margin: 10px auto;
                padding: 30px;
            }

            .activity-row > table {
                clear: both;
            }

            .activity-row .activity-thumbnail-container {
                float: left;
            }

            .activity-row .activity-summary-container {
                padding-left: 52px;
                word-wrap: break-word;
            }

            .activity-row .activity-summary-container .activity-date {
                margin-top: 5px;
            }

            .activity-row .activity-previews-container {
                margin-top: 25px;
            }

            .activity-row .activity-comment-container {
                margin-top: 25px;
                min-height: 40px;
            }

            .activity-row .activity-comment-container.comment-level-1 {
                margin-left: 40px;
            }

            .activity-row .activity-comment-container.comment-level-2 {
                margin-left: 80px;
            }

            .activity-row .activity-comment-container .activity-comment-thumbnail-container {
                float: left;
            }

            .activity-row .activity-comment-container .activity-comment {
                padding-left: 52px;
                word-wrap: break-word;
            }

            .activity-row .activity-comment-container .activity-comment .activity-comment-message {
                margin-top: 7px;
            }

        </style>
    </head>
    <body>
        <table>
            <tbody>
                <% renderHeader(); %>

                <tr class="row activity-spacer">
                    <td></td>
                </tr>

                <% 
                _.each(activities, function(activity) {
                    var summary = util.i18n.translate(activity.summary.i18nKey, activity.summary.i18nArguments) ;
                    summary = util.html.ensureLinksStartWith(summary, baseUrl);
                %>
                    <tr class="row activity-row" data-activity-id="<%= activity.activity['oae:activityId'] %>">
                        <td>
                            <table>
                                <tbody>
                                    <tr>
                                        <td>
                                            <div class="activity-thumbnail-container">
                                                <% renderUserThumbnail(activity.primaryThumbnail); %>
                                            </div>
                                            <div class="activity-summary-container">
                                                <div><%= summary %></div>
                                                <div class="activity-date muted"><%= util.i18n.formatDate(new Date(activity.created), 'f') %></div>
                                            </div>
                                            <table class="activity-previews-container">
                                                <tbody>
                                                    <%
                                                        // We only need to display the first 6 thumbnails
                                                        activity.thumbnails = activity.thumbnails.slice(0, 6);

                                                        // Display 3 thumbnails per row
                                                        _.each(activity.thumbnails, function(thumbnail, index) {
                                                            // Start a new row every fourth thumbnail (or for the initial one)
                                                            if (index % 3 === 0) {
                                                                print('<tr>');
                                                            }

                                                            renderPreviewTile(thumbnail, activity.thumbnails.length === 1);

                                                            // Close the row after 3 thumbnails or when we've iterated over all the thumbnails
                                                            if (index % 3 === 2 || index === (activity.thumbnails.length - 1)) {
                                                                print('</tr>');
                                                            }
                                                        });
                                                    %>
                                                </tbody>
                                            </table>
                                            <% _.each(activity.comments, function(comment) {
                                                %>
                                                <div class="activity-comment-container comment-level-<%= comment['oae:level'] %>">
                                                    <div class="activity-comment-thumbnail-container">
                                                        <% renderUserThumbnail(comment.author); %>
                                                    </div>
                                                    <div class="activity-comment">
                                                        <a href="<%= baseUrl + comment.author['oae:profilePath'] %>" title="<%= util.html.encodeForHTMLAttribute(comment.author.displayName) %>">
                                                            <%= util.html.encodeForHTML(comment.author.displayName) %>
                                                        </a> 
                                                        <span class="activity-date muted"><%= util.i18n.formatDate(new Date(activity.created), 'f') %></span>
                                                        <div class="activity-comment-message"><%= util.text.toHtml(comment.content) %></div>
                                                    </div>
                                                </div>
                                            <% }); %>
                                        </td>
                                    </tr>
                                </tbody>
                            </table>
                        </td>
                    </tr>
                    <tr class="row activity-spacer">
                        <td></td>
                    </tr>
                <% }); %>

                <% renderFooter(); %>
            </tbody>
        </table>
    </body>
</html>
